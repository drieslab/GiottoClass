% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/join.R
\name{joinGiottoObjects}
\alias{joinGiottoObjects}
\title{Join giotto objects}
\usage{
joinGiottoObjects(
  gobject_list,
  gobject_names = NULL,
  join_method = c("shift", "z_stack", "no_change"),
  z_vals = 1000,
  x_shift = NULL,
  y_shift = NULL,
  x_padding = NULL,
  y_padding = NULL,
  dry_run = FALSE,
  verbose = FALSE
)
}
\arguments{
\item{gobject_list}{list of giotto objects}

\item{gobject_names}{unique giotto names for each giotto object}

\item{join_method}{method to join giotto objects, see details}

\item{z_vals}{distance(s) along z-axis if method is
z-stack (default is step of 1000)}

\item{x_shift}{numeric vector of values to shift along x-axis if method is
"shift"}

\item{y_shift}{numeric vector of values to shift along y-axis if method is
"shift"}

\item{x_padding}{x padding between datasets if method is shift}

\item{y_padding}{y padding between datasets if method is shift. Only applied
when y shifts are given.}

\item{dry_run}{logical. Plot expected object locations after join, but
do not actually perform it.}

\item{verbose}{be verbose
Preview where each gobject will be in space with bounding polygons}
}
\value{
giotto object
}
\description{
Function to join multiple giotto objects together
}
\details{
This function joins both the expression and spatial information of
multiple giotto objects into a single one. Giotto supports multiple ways of
joining spatial information as selected through param \code{join_method}:
\itemize{
\item \strong{"shift"}
(default) Spatial locations of different datasets are shifted
by numeric vectors of values supplied through \code{x_shift},
\code{y_shift}, \code{x_padding}, and \code{y_padding}. This is particularly useful
for data that is provided as tiles or ROIs or when analyzing multiple
spatial datasets together and keeping their spatial data separate.

\strong{If shift values are given then a value is needed for each giotto
object to be joined in \code{gobject_list}. Order matters.}

If a regular step value is desired instead of a specific list of values,
use \code{x_padding} and \code{y_padding}. Both shift and padding values
can be used at the same time.

When \code{x_shift} is \code{NULL}, it defaults to the x range of gobjects in the
list so that datasets are xshifted exactly next to each other with no
overlaps. An additional default \code{x_padding = 1000} is applied if
\code{x_shift}, \code{x_padding}, \code{y_shift}, \code{y_padding} are all \code{NULL}.
\item \strong{"z_stack"}
Datasets are spatially combined with no change to x and y
spatial locations, but a z value is incorporated for each dataset based
on input supplied through param \code{z_vals}. To specify a z value for
each dataset to join, a numeric vector must be given with a value for
each element in \code{gobject_list}. Order matters.

Alternatively, a single numeric value can be supplied to \code{z_vals}
in which case this input will be treated as a z step value.
\item \strong{"no_change"}
No changes are applied to the spatial locations of the datasets when
joining.
}
}
\examples{
# joining objects with no spatial information
m1 <- matrix(rnorm(100), nrow = 10)
m2 <- matrix(rnorm(100), nrow = 10)
colnames(m1) <- paste0("cell_", seq_len(10))
colnames(m2) <- paste0("cell_", seq_len(10))
rownames(m1) <- rownames(m2) <- paste0("feat_", seq_len(10))

g1 <- createGiottoObject(expression = m1)
g2 <- createGiottoObject(expression = m2)

joinGiottoObjects(
    gobject_list = list(g1, g2), 
    gobject_names = c("g1", "g2")
)

# dry run joining objects with spatial information
# a default x_padding of 1000 is applied
viz <- GiottoData::loadGiottoMini("viz")
joinGiottoObjects(
    list(viz, viz),
    gobject_names = c("v1", "v2"),
    dry_run = TRUE
)

# place them right next to each other
# note that this means generated spatial networks will be more likely to 
# link across the datasets
joinGiottoObjects(
    list(viz, viz),
    gobject_names = c("v1", "v2"),
    dry_run = TRUE,
    x_padding = 0
)

# join the spatial objects
joined_viz <- joinGiottoObjects(
    list(viz, viz),
    gobject_names = c("v1", "v2")
)

}
\concept{giotto}
