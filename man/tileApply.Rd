% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tile.R
\name{tileApply}
\alias{tileApply}
\alias{tileApply,SpatRaster,missing-method}
\title{Apply Across Spatial Tiles}
\usage{
\S4method{tileApply}{SpatRaster,missing}(
  x,
  FUN,
  ti,
  lyr = NULL,
  cores = NA,
  future.seed = TRUE,
  verbose = NULL,
  ...
)
}
\arguments{
\item{x}{object to tile apply}

\item{FUN}{function to run across tiles. The first param must be the
\code{SpatRaster} object. If \code{.I} is included as a parameter, it can be used
in the function as the tile number.}

\item{ti}{\code{tileIterator} that defines the tiles to apply on.}

\item{lyr}{numeric. Layer number(s) to use}

\item{cores}{deprecated}

\item{future.seed}{whether to set a seed when using \code{method = "future"}}

\item{\dots}{additonal params to pass to \code{\link[future.apply:future_lapply]{future.apply::future_lapply()}}}
}
\description{
Apply a function across spatial tiles to both speed up processing and keep
memory usage reasonable for large operations. This function also hooks into
the \{future\} parallelization framework.
}
\section{SpatRaster}{

This function currently only works for single source SpatRasters. Support
for applying across affine transformed images is still under development.
}

\examples{
f <- system.file("ex/elev.tif", package="terra")
r <- rast(f)
ti <- tileIterator()
ext(ti) <- ext(r)
length(ti) <- 4

outdir <- file.path(tempdir(), "testwrite")
dir.create(outdir)

tileApply(r, ti = ti, lyr = 1, FUN = function(x, .I) {
    terra::writeRaster(x,
        filename = file.path(outdir, sprintf("tile_\%03d.tif", .I)))
})
list.files(outdir)

r1 <- terra::rast(file.path(outdir, "tile_001.tif"))
plot(r1)

# remove
rm(r1)
unlink(outdir, recursive = TRUE, force = TRUE)
}
\seealso{
\code{\link[GiottoUtils:lapply_flex]{GiottoUtils::lapply_flex()}} for the function passing to future.
}
