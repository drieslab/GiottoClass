% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classes.R, R/tile.R
\docType{class}
\name{tileIterator-class}
\alias{tileIterator-class}
\alias{tileIterator}
\title{Spatial Tile Iterator}
\description{
Utility class that simplifies the setup of tiles across a spatial extent.
Tiles are stored in a lightweight format safe to be passed to child
processes. Tile \code{SpatExtent} objects can be extracted on-demand.
}
\section{Slots}{

\describe{
\item{\code{extent}}{numeric. Spatial extent to tile across.}

\item{\code{n}}{numeric. Number of tiles to create.}

\item{\code{tiles}}{array. Tile extents stored as a 3D numeric array where dim 1 is
tiles along the x axis, dim 2 is along the y, and dim 3 is xmin, xmax,
ymin, and ymax of the tile.}

\item{\code{metadata}}{data.frame. Metadata per tile}
}}

\section{setup and basic characteristics}{

A \code{tileIterator} needs both a spatial extent to tile across and also a
request for a certain number of tiles.
\itemize{
\item \code{tileIterator()} is used to create a \code{tileIterator} instance.
\item \verb{ext()<-} can be used to set up the spatial extent.
\item \code{ext()} is used to check extent.
\item \verb{length()<-} is used to request a number of tiles.
\item \code{length()} can be used to find out how many tiles there are.
\item \code{dim()}/\code{nrow()}/\code{ncol()} basic generics are implemented and return
information about how the tiles are arranged.
}

Note that the number of requested tiles may not be the actual length, since
a grid pattern must be followed. However, the number of generated tiles will
be AT LEAST the number that is requested. Generated tiles will have as square
a shape as possible.
}

\section{Getting tile extent}{

\verb{[i]} and \verb{[i, j]} indexing can be used to select tiles, similarly to a
matrix. \verb{[]} without any indexing will return the entire set of extents
as a list.
}

\section{padding}{

\code{+}/\code{-} can be used to add or subtract padding to each of the tiles.
}

\section{previewing tiles}{

\code{plot()} can be used to check the layout of the tiles.
}

\section{metadata}{

The \code{tileIterator} object can contain metadata. By default after extent and
tiles setup, a column called \code{"tile"} will be set up that simply records
which tile it is.
\itemize{
\item \code{$} can be used to view a specific type of metadata
\item \verb{$<-} can be used to set additional metadata items
\item \verb{[[i]]} selection will pull specific metadata rows corresponding to the
selected tiles.
}
}

\examples{
x <- tileIterator()
force(x)
ext(x) <- c(0, 100, 0, 100)
length(x) <- 8 # generated tiles will be AT LEAST this value
force(x)

length(x) # how many were actually generated?
dim(x)
nrow(x)
ncol(x)

# previewing
plot(x)

# tile padding
y <- x + 10
plot(y, alpha = 0.3)
plot(ext(x), add = TRUE, border = "red")

z <- x - 5
plot(ext(x), border = "red")
plot(z, add = TRUE)

# tile selection
x[5]
x[1, 2:3]

# metadata
x$tile
x$fname <- sprintf("tile_\%03d.tif", x$tile)
x[[5]]
x[[1:3]]$fname
}
