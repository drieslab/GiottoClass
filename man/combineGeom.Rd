% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/giotto_structures.R
\name{combineGeom}
\alias{combineGeom}
\alias{splitGeom,giottoPolygon-method}
\title{Combine or Split Complex Geometries}
\usage{
\S4method{combineGeom}{giottoPolygon}(
  x,
  by = NULL,
  dissolve = FALSE,
  fun = "mean",
  ...,
  fmt = "poly_\%d"
)

\S4method{splitGeom}{giottoPolygon}(x, ...)
}
\arguments{
\item{x}{geometry class to combine or split.}

\item{by}{character. Column name of variable used to group the geometries.
Will be used as the new \code{poly_ID} column. All geometries will be combined
if not provided.}

\item{...}{additional params to pass to \code{\link[terra:aggregate]{terra::aggregate()}} or
\code{\link[terra:disaggregate]{terra::disagg()}}}

\item{fmt}{character. sprintf formatting to use to generate \code{poly_ID} column
values if no attributes are retained after combining.}
}
\value{
the same class as \code{x}
}
\description{
Geometries can be either single/simple or multi with multiple closed rings
defined as a single record. \code{combineGeom()} is used to combine polygons.
\code{splitGeom()} breaks combined geometries down into constituent parts.
}
\details{
Currently, these are simple wrappers around terra's
\code{aggregate(dissolve = FALSE)} and \code{disagg()} with some additional handling
around the \code{poly_ID} column and a different name to avoid confusion with
spatial feature aggregation.
}
\section{Geometry Attributes Handling}{
\itemize{
\item \code{combineGeom()} attributes are only kept if \code{by} param is used. For
conflicts where more than one value is present for a single variable after
combining, they are resolved using \code{fun} param.
When \code{by=NULL}, all attributes are dropped and a default \code{poly_ID} column
is generated based on the \code{fmt} param.
\item \code{splitGeom()} attributes are duplicated for each part that was part of the
same multipolygon. The \code{poly_ID} column will be made unique.
\item overlaps and centroids information will be dropped after either operation.
}
}

\examples{
dt <- data.table::data.table(
    id = c(
        rep('a', 3), # Triangle (id 'a')
        rep('b', 4), # Square 1 (id 'b')
        rep('c', 4), # Square 2 (id 'c')
        rep('d', 4) # Square 3 (id 'd')
    ),
    x = c(
        0, 1, 0.5,
        2, 5, 5, 2,
        5, 5, 6, 6,
        6, 7, 7, 6
    ),
    y = c(
        0, 0, 1,
        2, 2, 5, 5,
        2, 3, 3, 2,
        5, 5, 6, 6
    )
)
plot_colors <- getRainbowColors(4)
gpoly <- createGiottoPolygon(dt, verbose = FALSE)
plot(gpoly, col = plot_colors)

gpoly$group_id <- sprintf("group_\%d", c(1, 2, 2, 3))
gpoly$values <- 1:4
force(gpoly)

c_all <- combineGeom(gpoly) # combine all
force(c_all)
plot(c_all, col = plot_colors)

c_gid <- combineGeom(gpoly, by = "group_id")
force(c_gid)
plot(c_gid, col = plot_colors)
# `dissolve` removes touching boundaries
plot(combineGeom(gpoly, by = "group_id", dissolve = TRUE),
     col = plot_colors)

# split combined geometries
s_cgid <- splitGeom(c_gid)
force(s_cgid)
plot(s_cgid, col = plot_colors)
}
