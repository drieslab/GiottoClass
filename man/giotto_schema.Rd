% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/methods-nesting.R
\name{giotto_schema}
\alias{giotto_schema}
\alias{spatUnit}
\alias{spatUnit<-}
\alias{featType}
\alias{featType<-}
\alias{objName}
\alias{objName<-}
\alias{prov}
\alias{prov<-}
\alias{spatUnit,ANY-method}
\alias{spatUnit,giotto-method}
\alias{spatUnit,list-method}
\alias{spatUnit,spatData-method}
\alias{spatUnit,giottoPolygon-method}
\alias{spatUnit<-,ANY-method}
\alias{spatUnit<-,spatData-method}
\alias{spatUnit<-,giottoPolygon-method}
\alias{spatUnit<-,list-method}
\alias{spatUnit<-,giotto-method}
\alias{featType,ANY-method}
\alias{featType,giotto-method}
\alias{featType,list-method}
\alias{featType,featData-method}
\alias{featType<-,ANY-method}
\alias{featType<-,featData-method}
\alias{featType<-,list-method}
\alias{featType<-,giotto-method}
\alias{objName,ANY-method}
\alias{objName,list-method}
\alias{objName,nameData-method}
\alias{objName,giottoPoints-method}
\alias{objName,giottoLargeImage-method}
\alias{objName,giottoImage-method}
\alias{objName<-,list-method}
\alias{objName<-,nameData-method}
\alias{objName<-,giottoImage-method}
\alias{objName<-,giottoLargeImage-method}
\alias{objName<-,giottoPoints-method}
\alias{prov,provData-method}
\alias{prov<-,provData-method}
\title{Giotto schema}
\usage{
\S4method{spatUnit}{ANY}(x)

\S4method{spatUnit}{giotto}(x)

\S4method{spatUnit}{list}(x)

\S4method{spatUnit}{spatData}(x)

\S4method{spatUnit}{giottoPolygon}(x)

\S4method{spatUnit}{ANY}(x) <- value

\S4method{spatUnit}{spatData}(x) <- value

\S4method{spatUnit}{giottoPolygon}(x) <- value

\S4method{spatUnit}{list}(x) <- value

\S4method{spatUnit}{giotto}(x, old) <- value

\S4method{featType}{ANY}(x)

\S4method{featType}{giotto}(x)

\S4method{featType}{list}(x)

\S4method{featType}{featData}(x)

\S4method{featType}{ANY}(x) <- value

\S4method{featType}{featData}(x) <- value

\S4method{featType}{list}(x) <- value

\S4method{featType}{giotto}(x, old) <- value

\S4method{objName}{ANY}(x)

\S4method{objName}{list}(x)

\S4method{objName}{nameData}(x)

\S4method{objName}{giottoPoints}(x)

\S4method{objName}{giottoLargeImage}(x)

\S4method{objName}{giottoImage}(x)

\S4method{objName}{list}(x) <- value

\S4method{objName}{nameData}(x) <- value

\S4method{objName}{giottoImage}(x) <- value

\S4method{objName}{giottoLargeImage}(x) <- value

\S4method{objName}{giottoPoints}(x) <- value

\S4method{prov}{provData}(x)

\S4method{prov}{provData}(x) <- value
}
\arguments{
\item{x}{\code{giotto} or \{Giotto\} S4 subobject}

\item{value}{value to set for this schema component}

\item{old}{character. Old value to replace}
}
\value{
character. NA is returned when schema component is not applicable
to target object. If using the replacement function, the \code{giotto} object
or subobject is returned
}
\description{
Data within the \code{giotto} object is organized in a schema
largely revolving around the \strong{spatial unit} (which spatial length scale or
polygonal annotation that is used as the unit of study) and the
\strong{feature type} (data modality). Information is then further organized
based on the \strong{name} or key of the object. In cases where a single
spatial unit is comprised of information from multiple others,
\strong{provenance} is tracked to keep a record of which spatial units were the
sources of that data. The functions to get and set these aspects of the
schema on the Giotto object and subobjects are:
\itemize{
\item \strong{spatial unit:} \code{spatUnit()}, \verb{spatUnit<-()}
\item \strong{feature type:} \code{featType()}, \verb{featType<-()}
\item \strong{name:}         \code{objName()}, \verb{objName<-()}
\item \strong{provenance:}   \code{prov()}, \verb{prov<-()}
}
}
\examples{
g <- GiottoData::loadGiottoMini("vizgen")

########### Get/set existing schema values within giotto object ####
spatUnit(g)
featType(g)

# rename a spatial unit
spatUnit(g, old = "z0") <- "slice1"
spatUnit(g)

# rename a feature type
featType(g, old = "rna") <- "feature1"
featType(g)

########### Get schema values from a list of objects ###############

glist <- as.list(g)
spatUnit(glist)
featType(glist)
objName(glist)

########### Get and set schema values with single subobject ########

fx <- g[["feat_meta", spat_unit = "aggregate"]][[1]]

spatUnit(fx)
spatUnit(fx) <- "foo"
spatUnit(fx)

featType(fx)
featType(fx) <- "bar"
featType(fx)

ex <- g[["expression", spat_unit = "aggregate"]][[1]]

objName(ex)
objName(ex) <- "baz"
objName(ex)

prov(ex)
prov(ex) <- "qux"
prov(ex)
}
