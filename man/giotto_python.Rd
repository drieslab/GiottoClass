% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/python_environment.R
\name{giotto_python}
\alias{giotto_python}
\alias{checkGiottoEnvironment}
\alias{installGiottoEnvironment}
\alias{removeGiottoEnvironment}
\alias{set_giotto_python_path}
\title{Giotto python environment}
\usage{
checkGiottoEnvironment(
  envname = NULL,
  mini_install_path = deprecated(),
  verbose = NULL
)

installGiottoEnvironment(
  packages_to_install = c("pandas==1.5.1", "networkx==2.8.8", "python-igraph==0.10.2",
    "leidenalg==0.9.0", "python-louvain==0.16", "python.app==1.4", "scikit-learn==1.1.3"),
  python_version = "3.10.2",
  mini_install_path = NULL,
  confirm = TRUE,
  envname = "giotto_env",
  conda = "auto",
  force_miniconda = FALSE,
  force_environment = FALSE,
  verbose = NULL
)

removeGiottoEnvironment(
  envname = "giotto_env",
  mini_path = deprecated(),
  conda = "auto",
  verbose = TRUE
)

set_giotto_python_path(python_path = NULL, verbose = NULL, initialize = TRUE)
}
\arguments{
\item{envname}{character. (optional) The name of a miniconda or conda
environment OR path to a python executable. When using
\code{installGiottoEnvironment()}, the default is \code{"giotto_env"}}

\item{mini_install_path}{(optional) desired miniconda installation location.
Default is chosen by \code{reticulate::install_miniconda()}}

\item{verbose}{be verbose}

\item{packages_to_install}{python modules (packages) to install for Giotto.}

\item{python_version}{python version to use within the giotto conda
environment. Default is v3.10.2}

\item{confirm}{whether to pause for confirmation of conda environment
install location (default = TRUE)}

\item{conda}{either "auto" (default) to allow reticulate to handle it, or
the full filepath to the conda executable. You can also set the option
\code{"reticulate.conda_binary"} or \code{Sys.setenv()} \code{"RETICULATE_CONDA"} to tell
reticulate where to look.}

\item{force_miniconda}{force reinstallation of miniconda}

\item{force_environment}{force reinstallation of the giotto environment}

\item{mini_path}{deprecated}

\item{python_path}{character. Name of environment or full path to python
executable.}

\item{initialize}{force initialization of set python path. Default = TRUE.}
}
\description{
\pkg{Giotto} has several functions that utilize python packages. To
facilitate this, utilities are provided for creating, removing, and
attaching python environments. Python environments are currently handled
entirely through \pkg{reticulate}.

\strong{Creating an environment}

\code{installGiottoEnvironment()} can be used to create a default miniconda
environment called \code{giotto_env} that includes some commonly used python
packages. See the \strong{python versions} section for specific packages and
version numbers.

Custom environments manageable through \pkg{reticulate} are also compatible
and can be hooked into by Giotto after creation.

\code{checkGiottoEnvironment()} can be used in order to test if an envname or
full python path is accessible by Giotto. It will also check the
\code{"giotto.py_path"} option.

\strong{Choosing environments}

Only one python environment may be initialized and used by \pkg{reticulate}
during a single R session. In order to switch to another environment, the
R session must be restarted.

Whenever any of the following happens for the first time in a session:
\itemize{
\item \code{giotto} object creation (due to creation of a default
\code{giottoInstructions})
\item \code{giottoInstructions} creation (\code{createGiottoInstructions()})
\item \code{GiottoClass::set_giotto_python_path()} is called (most direct)
}

For the above, Giotto automatically detects AND activates a python
environment based on the following defaults in decreasing priority:
\enumerate{
\item User provided (when \code{python_path} param is not \code{NULL})
\item Any provided path or envname in option \code{"giotto.py_path"}
\item Default expected giotto environment location based on
\code{\link[reticulate:miniconda_path]{reticulate::miniconda_path()}}
\item Envname \code{"giotto_env"}
\item System default python environment
}

This behavior is mediated by the \code{set_giotto_python_path()} utility
function, which will find an environment and then initialize it.
}
\section{Functions}{
\itemize{
\item \code{checkGiottoEnvironment()}: \itemize{
\item Based on \code{envname}, detect if there a conda or miniconda environment
accessible by \pkg{Giotto}. By default, the \code{envname} \code{"giotto_env"}, then
the option \code{"giotto.py_path"} is checked, but an alternative can be
provided.
\item Setting \code{envname} as \code{":auto:"} will let  \pkg{Giotto} autodetect a python
env to use. See section for \code{set_giotto_python_path()} for details on the
autodetection.
\item Returns \code{TRUE} if an env is detected and accessible by Giotto. \code{FALSE}
if not. Will not initialize a python environment during detection.
}

\item \code{installGiottoEnvironment()}: \itemize{
\item Install a giotto python environment using miniconda through
\pkg{reticulate}. By default, the envname used will be \code{"giotto_env"}. If
another name is used, you will have to provide that envname at the start of
a session (see \strong{Choosing an environment} above). \cr This includes a
miniconda installation and also a set of python packages that \pkg{Giotto}
may often use. See details for further information on setting up an
environment with a .yml
\item Returns \code{NULL}
}

\item \code{removeGiottoEnvironment()}: \itemize{
\item Remove a python environment
\item Returns \code{NULL}
}

\item \code{set_giotto_python_path()}: \itemize{
\item Detect and activate a python path. The \code{python_path} param
accepts both full filepaths to the python executable and envnames. The
final path to use is determined as follows in decreasing priority:
\enumerate{
\item User provided (when \code{python_path} is not \code{NULL})
\item Any provided path or envname in option \code{"giotto.py_path"}
\item Default expected giotto environment location based on
\code{\link[reticulate:miniconda_path]{reticulate::miniconda_path()}}
\item Envname "giotto_env"
\item System default python environment
}
\item This function exits without doing anything if option \code{"giotto.use_conda"}
is \code{FALSE}.
\item By default this function will force initialization of the python
environment to set, locking the session to that environment.
This can be skipped if \code{initialize = FALSE}, however in that case, the
actual python path set downstream may differ from what is expected and
reported by this function.
\item Returns detected path to python binary or \code{NULL} if none found.
}

}}
\section{python versions}{
By default, Python v3.10.2 will be used with the following python modules
for giotto environment installation:
\preformatted{
   - pandas==1.5.1
   - networkx==2.8.8
   - python-igraph==0.10.2
   - leidenalg==0.9.0
   - python-louvain==0.16
   - python.app==1.4
   - scikit-learn==1.1.3
}

The giotto environment can be custom installed by changing the
python_version parameter and module versions in the
\code{packages_to_install} parameter.

For example, this giotto environment works as well, and was the
default environment status for past releases of Giotto.
Python  v3.6
\preformatted{
  - pandas==1.1.5
  - networkx==2.6.3
  - python-igraph==0.9.6
  - leidenalg==0.8.7
  - python-louvain==0.15
  - python.app==2 # macOS only
  - scikit-learn==0.24.2
}
}

\section{.yml installs}{
Please note that multiple .yml files are provided in the
repository for advanced installation and convenience. To install the most
up-to-date Giotto environment using a .yml file, open a shell compatible
with conda/miniconda and navigate to the directory specified by
\code{system.file(package = "Giotto", "python/configuration")}. Once in this
directory, run the following to create your environment in one step:

\preformatted{conda env create -n giotto_env -f ./genv.yml}
}

\examples{
# detect without initialization
# check default env location
checkGiottoEnvironment()

# use environment name
checkGiottoEnvironment("giotto_env")

# full path 
# (use this if a different install location specified with .condarc)
if (FALSE) {
checkGiottoEnvironment(
    "/Users/example/Library/r-miniconda-arm64/envs/giotto_env/bin/pythonw"
)
}
if (FALSE) {
# default environment installation
installGiottoEnvironment()

# install to alternate location
temp_env <- tempdir()
installGiottoEnvironment(mini_install_path = temp_env)
}

# detect AND initialize a python environment
set_giotto_python_path()
}
\keyword{internal}
